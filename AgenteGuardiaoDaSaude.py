# -*- coding: utf-8 -*-
"""AgenteMedicamentos2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J9nVDvR7sJDbZIuEHyzQ4em64kTamRbi
"""

# Commented out IPython magic to ensure Python compatibility.
# -*- coding: utf-8 -*-
"""AgenteMedicamentos.ipynb"""

# Instalar as bibliotecas necessárias
# %pip -q install google-genai
# %pip -q install google-genai google-adk google-auth-oauthlib google-api-python-client

# Configurar a API Key do Google Gemini
import os
from google.colab import userdata

os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')

# Configurar o cliente da SDK do Gemini
from google import genai

client = genai.Client()

# Verificar modelos disponíveis
for model in client.models.list():
    print(model.name)

MODEL_ID = "gemini-2.0-flash"

# Commented out IPython magic to ensure Python compatibility.
# %pip -q install google-adk

# Importações necessárias
from IPython.display import HTML, Markdown
from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types  # Para criar conteúdos (Content e Part)
from datetime import date
import textwrap  # Para formatar melhor a saída de texto
import re  # Para expressões regulares
import warnings

warnings.filterwarnings("ignore")

# Função auxiliar que envia uma mensagem para um agente via Runner e retorna a resposta final
def call_agent(agent: Agent, message_text: str) -> str:
    # Cria um serviço de sessão em memória
    session_service = InMemorySessionService()
    # Cria uma nova sessão (você pode personalizar os IDs conforme necessário)
    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    # Cria um Runner para o agente
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    # Cria o conteúdo da mensagem de entrada
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    # Itera assincronamente pelos eventos retornados durante a execução do agente
    for event in runner.run(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
          for part in event.content.parts:
            if part.text is not None:
              final_response += part.text
              final_response += "\n"
    return final_response

# Função auxiliar para exibir texto formatado em Markdown no Colab
def to_markdown(text):
  text = text.replace('•', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

# Função Auxiliar de Agenda Google
from dateutil import parser
from googleapiclient.discovery import build
from google.oauth2 import service_account

def setup_google_calendar():
    SCOPES = ['https://www.googleapis.com/auth/calendar']
    SERVICE_ACCOUNT_FILE = 'credentials.json'
    creds = service_account.Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)
    service = build('calendar', 'v3', credentials=creds)
    return service

from googleapiclient.discovery import build
from google.oauth2 import service_account

def setup_google_calendar():
    SCOPES = ['https://www.googleapis.com/auth/calendar']
    SERVICE_ACCOUNT_FILE = 'credentials.json'
    creds = service_account.Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)
    service = build('calendar', 'v3', credentials=creds)
    return service

# Função para configurar acesso ao Google Calendar
def setup_google_calendar():
    """Configura a autenticação do Google Calendar e retorna o serviço."""
    SCOPES = ['https://www.googleapis.com/auth/calendar']
    creds = None

    # Tenta obter credenciais do arquivo token.pickle
    if os.path.exists('token.pickle'):
        with open('token.pickle', 'rb') as token:
            creds = pickle.load(token)

    # Se não há credenciais válidas, solicita autenticação
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(
                'credentials.json', SCOPES)
            creds = flow.run_local_server(port=0)

        # Salva as credenciais para a próxima execução
        with open('token.pickle', 'wb') as token:
            pickle.dump(creds, token)

    # Retorna o serviço do Google Calendar
    return build('calendar', 'v3', credentials=creds)

# Função para criar eventos no Google Calendar
def criar_evento_calendar(service, titulo, descricao, data_inicio, hora_inicio, duracao_minutos=15, recorrencia=None):
    """
    Cria um evento no Google Calendar.

    Args:
        service: Serviço do Google Calendar
        titulo: Título do evento
        descricao: Descrição do evento
        data_inicio: Data de início no formato DD/MM/AAAA
        hora_inicio: Hora de início no formato HH:MM
        duracao_minutos: Duração do evento em minutos
        recorrencia: Lista com regra de recorrência RRULE (opcional)

    Returns:
        Link do evento criado ou mensagem de erro
    """
    try:
        # Converter data e hora para o formato ISO
        data_hora_inicio = datetime.strptime(f"{data_inicio} {hora_inicio}", "%d/%m/%Y %H:%M")
        data_hora_fim = data_hora_inicio + timedelta(minutes=duracao_minutos)

        # Preparar o corpo do evento
        event_body = {
            'summary': titulo,
            'description': descricao,
            'start': {
                'dateTime': data_hora_inicio.isoformat(),
                'timeZone': 'America/Sao_Paulo',  # Ajuste para seu fuso horário
            },
            'end': {
                'dateTime': data_hora_fim.isoformat(),
                'timeZone': 'America/Sao_Paulo',  # Ajuste para seu fuso horário
            },
            'reminders': {
                'useDefault': False,
                'overrides': [
                    {'method': 'popup', 'minutes': 10},
                ],
            },
        }

        # Adicionar recorrência se especificada
        if recorrencia:
            event_body['recurrence'] = recorrencia

        # Criar o evento
        event = service.events().insert(calendarId='primary', body=event_body).execute()

        return f"Evento criado com sucesso: {event.get('htmlLink')}"

    except Exception as e:
        return f"Erro ao criar evento: {str(e)}"

# Função para criar eventos de medicação no Google Calendar
def agendar_medicacao_calendar(service, nome_remedio, frequencia, data_inicio, hora_inicio, duracao_dias):
    """
    Agenda a medicação no Google Calendar com base na frequência.

    Args:
        service: Serviço do Google Calendar
        nome_remedio: Nome do medicamento
        frequencia: Frequência em horas (ex: 8 para cada 8 horas)
        data_inicio: Data de início no formato DD/MM/AAAA
        hora_inicio: Hora de início no formato HH:MM
        duracao_dias: Duração do tratamento em dias

    Returns:
        Lista de links para os eventos criados
    """
    # Calcular quantas vezes por dia o medicamento deve ser tomado
    vezes_por_dia = 24 // frequencia

    # Calcular data de término
    data_inicio_dt = datetime.strptime(data_inicio, "%d/%m/%Y")
    data_fim = data_inicio_dt + timedelta(days=duracao_dias)
    data_fim_str = data_fim.strftime("%Y%m%d")

    resultados = []

    # Criar um evento para cada horário do dia
    hora_atual = datetime.strptime(hora_inicio, "%H:%M")

    for i in range(vezes_por_dia):
        hora_evento = hora_atual.strftime("%H:%M")
        titulo = f"Tomar {nome_remedio}"
        descricao = f"Horário programado para tomar {nome_remedio}."

        # Configurar recorrência diária até a data de término
        recorrencia = [f'RRULE:FREQ=DAILY;UNTIL={data_fim_str}']

        # Criar o evento
        resultado = criar_evento_calendar(
            service,
            titulo,
            descricao,
            data_inicio,
            hora_evento,
            duracao_minutos=15,
            recorrencia=recorrencia
        )

        resultados.append(resultado)

        # Avançar para o próximo horário
        hora_atual = hora_atual + timedelta(hours=frequencia)

    # Adicionar evento para comprar mais medicamento (2 dias antes do término)
    data_compra = data_fim - timedelta(days=2)
    data_compra_str = data_compra.strftime("%d/%m/%Y")
    titulo_compra = f"Comprar {nome_remedio}"
    descricao_compra = f"Lembrete para comprar mais {nome_remedio} antes que o estoque acabe."

    resultado_compra = criar_evento_calendar(
        service,
        titulo_compra,
        descricao_compra,
        data_compra_str,
        "09:00",  # Horário padrão para lembrete de compra
        duracao_minutos=30,
        recorrencia=None  # Evento único
    )

    resultados.append(resultado_compra)

    return resultados# -*- coding: utf-8 -*-

##########################################
# --- Agente 1: Agente avaliador do receituario --- #
##########################################
def agente_avaliador(receituario, idade, data):
    avaliador = Agent(
        name="agente_avaliador",
        model=MODEL_ID,
        instruction="""
        Você é um médico e também foi graduado em farmácia. A sua tarefa é usar a ferramenta de busca do google (google_search) para obter informações atuais de medicamentos, sempre procurar em locais confiáveis, tal como o laboratório, anvisa ou entes confiáveis.
        Ao obter a informação do receituário e informar em tópicos de forma clara e objetiva:
          Se o que consta no receituário é a substância ativa ou se é um medicamento, identificar e escrever seu nome identificado no receituário.
          (Exemplo: Tomar Ibuprofeno 500mg a cada 8 horas por 7 dias. Via oral. Identificado que ibuprofeno é a substância ativa e não o nome do medicamento, logo Substância Ativa: Ibuprofeno)
          Sua ação terapêutica;
          Dosagem conforme idade do usuário, sua dosagem máxima e se dosagem orientada está dentro do recomendado pelo medicamento;
          Frequência de administração e se a frequência orientada está dentro do recomendado pelo medicamento;
          Interações medicamentosas,
          Efeitos secundários;
          Contra indicações;
          Informar qual o medicamento mais vendido ou mais famoso desta substância ou medicamento.

        Indicar Nota de rodapé com siglas ou jargões de termos técnicos, peço que os explique de forma simples e concisa.

        Importante: No início da sua resposta, inclua CLARAMENTE uma linha iniciando com:
        "SUBSTÂNCIA ATIVA: [nome]" ou "MEDICAMENTO: [nome]" conforme sua análise.
        """,
        description="Agente que busca informações do medicamento no Google",
        tools=[google_search]
    )

    entrada_do_agente_avaliador = f"receituário: {receituario}\nIdade: {idade}\nData atual: {data}"

    avaliacao_receituario = call_agent(avaliador, entrada_do_agente_avaliador)

    # Extrair informações de medicamento e substância ativa da resposta
    medicamento = None
    substancia_ativa = None

    # Procurar por "MEDICAMENTO:" na resposta
    med_match = re.search(r"MEDICAMENTO:\s*([^\n]+)", avaliacao_receituario)
    if med_match:
        medicamento = med_match.group(1).strip()

    # Procurar por "SUBSTÂNCIA ATIVA:" na resposta
    sub_match = re.search(r"SUBSTÂNCIA ATIVA:\s*([^\n]+)", avaliacao_receituario)
    if sub_match:
        substancia_ativa = sub_match.group(1).strip()

    return avaliacao_receituario, medicamento, substancia_ativa

################################################
# --- Agente 2: Planejador genérico --- #
################################################
def agente_generico(identificado, cidade, estado):
    generico = Agent(
        name="agente_generico",
        model=MODEL_ID,
        instruction=f"""
        Você é um assistente de busca por medicamentos genéricos.

        Sua tarefa é usar as informações fornecidas para buscar no google (Google Search)
        por medicamentos genéricos que correspondam ao medicamento ou substância ativa
        detalhada na 'Informação do Medicamento'.

        Após identificar os genéricos, busque pelo **preço médio** desses medicamentos genéricos
        especificamente para a localização da **cidade** do **estado** informado.

        Apresente os resultados listando os nomes dos medicamentos genéricos encontrados
        e seus respectivos preços médios na cidade especificada, informe através de uma tabela.

        --- Informação do Medicamento ---
        {identificado}

        --- Cidade do Usuário ---
        {cidade}
        --- Cidade do Usuário ---
        {estado}
        """,
        description="Agente que busca os medicamentos genéricos e seu preço médio",
        tools=[google_search]
    )

    # Executa o agente
    medicamento_generico = call_agent(generico, f"Buscar genéricos para {identificado}")
    return medicamento_generico

######################################
# --- Agente 3: Agente Farmacia --- #
######################################
def agente_farmacia(bairro, cidade, estado):
    farmacia = Agent(
        name="agente_farmacia",
        model=MODEL_ID,
        instruction="""
            Você é um agente de assistência que ajuda usuários a encontrarem farmácias próximas com base no endereço do usuário, baseado nas informações do bairro, cidade, estado informado, apenas para esta localidade. Sua principal função é exibir uma tabela informativa e clara contendo os seguintes dados para cada farmácia próxima ao bairro do usuário:
            Nome da Farmácia
            Endereço Completo da farmácia
            Distância aproximada até o bairro do usuário (em metros)
            Telefone para contato
            Oferece serviço de delivery (Sim, Não ou não informado)
            """,
        description="Agente identificador de farmacias proximas ao bairro",
        tools=[google_search]
    )
    # Executa o agente
    mapa_farmacia = call_agent(farmacia, f"Farmácias em {bairro}, {cidade}, {estado}")
    return mapa_farmacia

##########################################
# --- Agente 4: Agendar Medicamento --- #
##########################################
def agente_agenda(remedio_comprado, qtd_remedios, dia_inicio, hora_inicio, data_de_hoje, entrada_analisador):
    agendador = Agent(
        name="agente_agenda",
        model=MODEL_ID,
        instruction=f"""
            Você é um agente de saúde que organiza a rotina de medicamentos de um usuário no Google Agenda.
            Receba como entrada os seguintes dados:
            - Nome do remédio: {remedio_comprado}
            - Quantidade total comprada: {qtd_remedios}
            - Dia de início do tratamento: {dia_inicio}
            - Hora do primeiro alarme: {hora_inicio}
            - Data atual: {data_de_hoje}
            - Detalhes da prescrição:

            {entrada_analisador}

            Sua tarefa é:
            1. **Interpretar a frequência de uso** do remédio com base nas informações acima.
            2. **Calcular quando o estoque de remédios acabará** com base na frequência e quantidade disponível.
            3. **Planejar quando comprar mais medicamento** - deve ser 1 a 2 dias antes do término previsto do estoque.

            IMPORTANTE: Sua resposta DEVE incluir:
            1. A frequência de uso em horas (ex: a cada 8 horas)
            2. Número de comprimidos por dose
            3. Duração total do tratamento em dias
            4. Use exatamente este formato: "FREQUÊNCIA: X horas"
            5. Use exatamente este formato: "COMPRIMIDOS_POR_DOSE: X comprimido(s)"
            6. Use exatamente este formato: "DURAÇÃO_DIAS: X dias"
            7. Use exatamente este formato: "DATA DE TÉRMINO DO ESTOQUE: DD/MM/AAAA"
            8. Use exatamente este formato: "DATA DE RECOMPRA: DD/MM/AAAA"

            Forneça também um texto para o usuário explicando o plano de administração do medicamento.
            """,
        description="Agente que agenda os dias e horários dos remédios e necessidade de comprar mais",
        tools=[google_search]
    )
    # Executa o agente
    programacao = call_agent(agendador, "Criar plano de agenda para medicamento")
    return programacao

def executar_agendamento_calendar(remedio_comprado, qtd_remedios, dia_inicio, hora_inicio, resposta_agente):
    """
    Executa o agendamento real no Google Calendar com base na resposta do agente.

    Args:
        remedio_comprado: Nome do medicamento comprado
        qtd_remedios: Quantidade total comprada
        dia_inicio: Data de início do tratamento (DD/MM/AAAA)
        hora_inicio: Hora do primeiro alarme (HH:MM)
        resposta_agente: Resposta do agente de agendamento

    Returns:
        Relatório dos eventos criados
    """
    try:
        # Extrair informações da resposta do agente
        frequencia_match = re.search(r"FREQUÊNCIA:\s*(\d+)\s*horas", resposta_agente)
        comprimidos_match = re.search(r"COMPRIMIDOS_POR_DOSE:\s*(\d+)", resposta_agente)
        duracao_match = re.search(r"DURAÇÃO_DIAS:\s*(\d+)", resposta_agente)

        if not (frequencia_match and comprimidos_match and duracao_match):
            return "❌ Não foi possível extrair todas as informações necessárias da resposta do agente."

        frequencia = int(frequencia_match.group(1))
        comprimidos_por_dose = int(comprimidos_match.group(1))
        duracao_dias = int(duracao_match.group(1))

        # Configurar acesso ao Google Calendar
        try:
            service = setup_google_calendar()
        except Exception as e:
            return f"❌ Erro na configuração do Google Calendar: {str(e)}\n\nVerifique se o arquivo 'credentials.json' está disponível e tente novamente."

        # Agenda os eventos de medicação no Google Calendar
        resultados = agendar_medicacao_calendar(
            service,
            remedio_comprado,
            frequencia,
            dia_inicio,
            hora_inicio,
            duracao_dias
        )

        # Prepara o relatório
        relatorio = "✅ AGENDAMENTO REALIZADO COM SUCESSO NO GOOGLE CALENDAR\n\n"
        relatorio += f"Medicamento: {remedio_comprado}\n"
        relatorio += f"Frequência: a cada {frequencia} horas\n"
        relatorio += f"Comprimidos por dose: {comprimidos_por_dose}\n"
        relatorio += f"Duração do tratamento: {duracao_dias} dias\n\n"
        relatorio += "Eventos criados:\n"

        for resultado in resultados:
            relatorio += f"- {resultado}\n"

        # Extrair e adicionar informações sobre recompra
        recompra_match = re.search(r"DATA DE RECOMPRA:\s*(\d{1,2}/\d{1,2}/\d{4})", resposta_agente)
        if recompra_match:
            data_recompra = recompra_match.group(1)
            relatorio += f"\n⚠️ LEMBRETE: Comprar mais {remedio_comprado} em {data_recompra}"

        return relatorio

    except Exception as e:
        return f"❌ Erro ao executar agendamento: {str(e)}"

# Início do programa principal
data_de_hoje = date.today().strftime("%d/%m/%Y")

print("Iniciando o Sistema do Agente de Medicamentos ")

#--- Passo 1: Perguntas básicas ao usuário ---

# A resposta do usuário será armazenada na variável 'nome_usuario'.
nome_usuario = input("Qual seu nome? ")
print(f"Bem vindo {nome_usuario}, lhe auxiliaremos na busca de informações sobre seus medicamentos!")

# Você precisará convertê-la para um tipo numérico (como int ou float) depois.
idade_usuario = int(input("Qual sua idade? "))

# A resposta será armazenada na variável 'bairro_usuario'.
bairro_usuario = input("Qual seu bairro? ")

# A resposta será armazenada na variável 'cidade_usuario'.
cidade_usuario = input("Qual sua cidade? ")

# A resposta será armazenada na variável 'cidade_usuario'.
estado_usuario = input("Qual seu Estado? ")

# Mostrar as informações coletadas ---
print("\n--- Informações coletadas ---") # Adiciona uma linha em branco e um título
print(f"Nome: {nome_usuario}")
print(f"Idade: {idade_usuario}")
print(f"Bairro: {bairro_usuario}")
print(f"Cidade: {cidade_usuario}")
print(f"Cidade: {estado_usuario}")

receituario = input("❓ Por favor, digite o receituário médico sobre o qual você quer uma análise: ")

# Inserir lógica do sistema de agentes ################################################
if not receituario:
    print("Você esqueceu de digitar o receituário!")
else:
    print(f"Maravilha! Vamos lhe ajudar com seu receituário médico")

    avaliacao, medicamento, substancia_ativa = agente_avaliador(receituario, idade_usuario, data_de_hoje)
    print("\n--- 📝 Resultado do Agente 1 (Buscador) ---\n")
    display(to_markdown(avaliacao))
    print("--------------------------------------------------------------")

    if medicamento is None and substancia_ativa is None:
        print("Não foi encontrada nenhuma substância ativa ou medicamento identificável.")
        print("Não foi possível dar prosseguimento à análise.")
    else:
        if medicamento is not None:
            entrada = medicamento
            print(f"Medicamento identificado: {medicamento}")
        else:
            entrada = substancia_ativa
            print(f"Substância ativa identificada: {substancia_ativa}")

        generico = agente_generico(entrada, cidade_usuario, estado_usuario)
        print("\n--- 📝 Resultado do Agente 2 (Generico) ---\n")
        display(to_markdown(generico))
        print("--------------------------------------------------------------")

        local_farmacia = agente_farmacia(bairro_usuario, cidade_usuario, estado_usuario)
        print("\n--- 📝 Resultado do Agente 3 (Farmácias locais) ---\n")
        display(to_markdown(local_farmacia))
        print("--------------------------------------------------------------")

        agendar = input("Deseja agendar medicamento em sua agenda? (S/N) ")
        if agendar.upper() == "S":
              remedio_comprado = input("Qual o nome do medicamento comprado? ")
              qtd_remedios = int(input("Qual a quantidade total comprada? "))
              dia_inicio = input("Qual o dia de início do tratamento? ")
              hora_inicio = input("Qual a hora do primeiro alarme? ")
              agendamento_remedio = agente_agenda(remedio_comprado, qtd_remedios, dia_inicio, hora_inicio, data_de_hoje, avaliacao)
              print("\n--- 📝 Resultado do Agente 4 (Agenda) ---\n")
              display(to_markdown(agendamento_remedio))
        else:
              print("Ok, obrigado por utilizar nosso serviço!"))
              print("--------------------------------------------------------------")
print("Observação: Qualquer dúvida, entre em contato com seu médico ou profissional da saúde.")